1 as int32->f()   (1 as int32)->f()
1->f() as int32   (1->f()) as int32
f as Callback(x)

. () []
->
* & + - ~
as  // Doesn't care about precedence for rhs.

*x->f()   *(x->(f()))
a.b->f()   (a.b)->(f())
*x as int32   (*x) as int32
x->f() as int32   (x->(f())) as int32
x as int32->f()   (x as int32)->f()


optional<owned<&int32>>




// compilation units specify namespaces they depend on.
// source files don't have to import things unless they want to shorten a name.
// you cannot assign functions. to alias a function, do a using statement.

// myProject/package.txt
version 1.0.0
subpackages {
	pakageName {
		namespace1
		namespace2
	}
}
dependencies {
	std.io
	std.math
	somePackage
}

using std.io
using std.io.*
using std.io
	.printLine,
	.inputLine
using myIo = std.io // explicit export.
pub using std.io.* // export all.
pub using myPrint = std.io.printLine // explicit function export.
pub using myPi = std.math.pi // same variable with same address.
pub var myPi = std.math.pi // different var with different address.

using BigInt = int64 // is not a distinct type.

struct UserID = uint32 // is a distinct type.

struct Color {
	r, g, b uint8
} cases {
	default struct Rgb
	red = (255, 0, 0)
	green = (0, 255, 0)
	blue = (0, 0, 255)
}

struct Direction = uint8 cases {
	north
	south
	east
	west
}

var tuple (x int32, y string) = (1, "a")
var tuple = (1, "a") as (x int32, y string)
var array [10]int32 = [1, 2, 3]
var array = [1, 2, 3] as [10]int32
new [] as [10]int32 using heap
new (1, "a") as (int32, string)

maybe int32
any<int32, MyError>
all<File, Readable>
owned &int32
weak &int32
raw &int32
mutex int32




struct Foo {
	x owned &int32
}
func make() any<Foo, AllocationError> {
	return Foo(new 1)
}

var heapA = BlockAllocator(1024)
var heapB = StackAllocator(1024)
var foo owned &Foo = new Foo() using heapA using heapB
drop *foo using heapA
drop foo using heapB

using var allocator = BlockAllocator(1024)
var foo = new Foo()




pub namespace animals
using std.io.printLine

pub trait Animal {
	pub name string
	pub age uint32
}

pub method makeNoise(animal &Animal)

pub struct Dog {
	using Animal
	pub tag string
}

pub struct Cat {
	using Animal
	pub breed string
}

pub func makeNoise(dog &Dog) {
	printLine("woof")
}

pub func makeNoise(cat &Cat) {
	printLine("meow")
}

pub func main() {
	var pet mut &Animal = &Dog()
	makeNoise(pet)
	pet = &Cat()
	pet->makeNoise()
}




pub namespace physics

pub struct Entity {
	pub pos, vel, acc Vector
} cases {
	struct Circle {pub radius float64}
	struct Mesh {pub vertices owned []Vector}
}

pub method update(entity &mut Entity)

pub struct Vector {
	using std.operations.To<string>, .Equality, .Arithmetic
	pub x, y float64
}

pub func to<string>(vector &Vector) {
	return new f"({vector.x}, {.y})"
}




pub namespace shapes
using std.math.pi
using std.io.printLine

pub struct Shape cases {
	struct Circle {pub radius float64}
	struct Triangle {pub base, height float64}
	struct Rectangle {pub width, height float64}
}

pub method area(shape &Shape) float64

pub func area(circle &Circle) {
	return pi*circle.radius*circle.radius
}

pub func area(triangle &Triangle) {
	return 0.5*triangle.base*triangle.height
}

pub func area(rectangle &Rectangle) {
	return rectangle.width*rectangle.height
}

pub func main() {
	var shape mut Shape = Circle(1)
	printLine(area(&circle))
	shape = Triangle(2, 3)
	printLine(shape->area())
	shape = Rectangle(4, 5)
	printLine(shape->area())
}
