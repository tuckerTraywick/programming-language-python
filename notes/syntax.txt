Structural typing? Would solve the ugly cases A... syntax. Would also eliminate the need to
distinguish between structs and traits. Only exception to structural typing would be methods.
Structural typing isn't practical with private fields or when field order matters.
() for construction and tuples
[] for indexing and generics

Structs have explicit subtyping and field order and padding matter.
Traits have implicit and optional explicit subtyping and field order and padding do not matter. You
can't construct an instance of a trait unless it is a case that is itself a struct. You must refer
to traits behind pointers. Case order doesn't matter for structs or traits. This lets you cast a pointer to a trait to a struct
with the same cases and vice versa. Methods follow traits for ease of use. Case structs can have
methods if all of their cases have an implementation.
Trait methods are implemented in the same scope they're defined or in the scope of the type
implementing them.
If an existing type already has the methods for an existing trait in its scope, it implements it.


(int32, string)(1, "a") # Tuple
[10]int32(1, 2, 3, [thru 9] = 0) # Array
[string]int32(["a"] = 1, ["b"] = 2) # Map
Dog(name = "fido") # Object
LinkedList[int32](1, 2, 3) # Generic
func(x int32) int32 => x + 1 # Anonymous function


struct Color {
	(r, g, b) uint8
} cases {
	red = (255, 0, 0)
	green = (0, 255, 0)
	blue = (0, 0, 255)
}


func takesType[type T]()
func takesStruct[struct T]()
func takesFunc[func f(x int32) int32]()
func takesValue[X int32]()
func takesSpecificType[string]()
func takesSpecificValue[0]()
func typeConstraint[type T < To[string]]()


func resultType() struct cases{int32, error}
func combineInterfaces(x *trait{Equality, Arithmetic, To[string]})
func namedReturnValues() struct{a int32, b string}


struct HasTag cases {string, int32}
trait NoTag cases {int32, string}
var tag HasTag = 1
var noTag mut *NoTag = &1
noTag = &tag // Valid. Structs implement traits with identical cases.


pub package interface
pub trait Fooer {
	pub foo(*this)
}

pub package implementation
// Doesn't have to explicitly embed Fooer.
pub struct Thing {
	x int32
}
pub foo(thing *Thing) {}

pub package main
import interface, implementation
pub func main() {
	var x *interface.Fooer = &implementation.Thing() // Allowed.
}


var (a, b) = ("a", 1)
var (a, b) int32 = (1, 2)
var (a, b int32) = ("a", 1)
var (a string, b int32) = ("a", 1)

for (a, b) in [](("a", 1), ("b", 2))
for (a, b) int32 in []((1, 2), (3, 4))
for (a, b int32) in [](("a", 1), ("b", 2))
for (a string, b int32) in [](("a", 1), ("b", 2))

// Body means argument name is the default. Same rule as variables.
func(a, b) {a + b}
func((a, b) int32) {a + b}
func(a, b int32) {(a, b)}
func(a string, b int32) {(a, b)}

// No body means argument type is the default.
func(int32, string)
func(int32, b string)

// Return tuples are always type by default.
func() (int32, string)
func() (int32, b string)

printLine(x.a, .b)
printLine((x.a, .b))




pub package animals

pub trait Animal {
	pub name string
	pub age uint32
	pub makeNoise(*this)
}

pub struct Dog {
	Animal
	pub tag string
}

pub struct Cat {
	Animal
	pub breed string
}

pub func makeNoise(dog *Dog) {}

pub func makeNoise(cat *Cat) {}


pub package moreAnimals
import {
	animals.*
}

pub trait Pet {
	Animal
	pub walk(*this)
}

pub struct Hamster {
	Pet
}

pub func makeNoise(hamster *Hamster) {}

pub func walk(hamster *Hamster) {}

pub func walk(dog *Dog) {}

pub func walk(cat *Cat) {}




pub package physics
import {
	std.operations
}

pub struct Entity {
	pub position, velocity, acceleration
} cases {
	struct Circle {
		pub radius float64
	}

	struct Mesh {
		pub vertices owned []Vector
	}
}

pub struct Vector {
	std.operations.To[string], .Equality, .Arithmetic
	pub x, y float64
}

pub func collide(a, b *mut Entity) {
	switch *a, *b {
		case Circle, Circle:
		case Mesh, Mesh:
		case Circle, Mesh:
		case Mesh, Circle:
	}
}

pub func to[string](vector *Vector) string {
	return f"({vector.x}, {vector.y})"
}




pub package lexer

pub struct Token {
	pub struct TokenType
	pub text string
}

pub struct TokenType cases {
	invalidToken
	number
	identifier
	keyword
	operator
}

pub func lex(text string) owned []mut Token {}


pub package parser
import {
	lexer.*
}

pub struct Tree {
	nodes owned []mut Node
}

pub struct Node {
	pub struct Nodestruct
	pub child *Node
	pub sibling *Node
}

pub struct Nodestruct cases {
	invalidSyntax
	program
	packageStatement
	...
}

// Uses the default implementation.
pub func *nodes(tree *Tree) *[]Node

pub func parse(tokens []Token) Node {}




package numberGuesser
import {
	std.io.printLine, .inputLine
	std.math.random
}

pub func main() {
	printLine("I'm thinking of a number between 1 and 100. What is it?\n")
	var number = random[int32](1 thru 100)
	while true {
		var guessString = inputLine("guess: ")
		var guess struct cases{uint32, error} = guessString->to[uint32]()
		
		if guess is not int32 {
			printLine("Enter a number between 1 and 100.")
		} else if guess == number {
			printLine("Correct! You win!")
			break
		} else {
			printLine("Incorrect. Guess again.")
		}
	}
}




pub package shapes
import {
	std.io.printLine
	std.math.pi, .pow
}

pub struct Shape {
	// You can define methods on case structs.
	pub func area(*this) float64
} cases {
	struct Circle {
		pub radius float64
	}

	struct Triangle {
		pub base, height float64
	}

	struct Rectangle {
		pub width, height float64
	}
}

pub func area(circle Circle) float64 {
	return pi*pow(circle.radius, 2)
}

pub func area(triangle Triangle) float64 {
	return 0.5*triangle.base*triangle.height
}

pub func area(rectangle Rectangle) float64 {
	return rectangle.width*rectangle.height
}

pub func main() {
	var shape mut Shape = Circle()
	printLine(shape.area())
	shape = Rectangle()
	printLine(shape.area())
}




package chess

struct Board = [8][8]char

var keepRunning mut = true
var turn uint32 mut

pub func main() {
	var board mut Board
	setupBoard(&board)
	printWelcomeMessage()
	while keepRunning {
		printTurnMessage()
	}
}
